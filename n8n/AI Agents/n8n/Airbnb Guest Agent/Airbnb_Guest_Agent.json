{
  "name": "Airbnb Guest Agent",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.1,
      "position": [
        0,
        0
      ],
      "id": "fb72d847-983d-42da-962c-6da78a2921d6",
      "name": "Telegram Trigger",
      "webhookId": "903035d9-da41-4e7b-9dec-b6db8fcdeaf5",
      "credentials": {
        "telegramApi": {
          "id": "QT1TafR4xHGlKkkF",
          "name": "Telegram account - Personal"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are to help the guest and you should contribute to them having as pleasant of a stay as possible.\n\nYou have access to the following tools:\n- calculator: if you need to do any calculations\n- web search general: to do general web searches of information that is not super up to date, this could be used to find things like resturants\n- web search news: this is to find super recent / trending things like events\n- guest_information_store: this holds all the information from the house owner, this is your first attempt and you should not deviate from this information if possible. Make sure to always check this!\n- send a message to the home owner: if any information is not in the reference information then send a message to the home owner telling them to contact the guest. Or to notify if anything has gone wrong.\n\n\nYou are to answer the following question: {{ $json.message.text }}\n\n\nOther information...\nToday's date: {{ $now }}\n\nEnsure your response is always under 3,000 characters. I am running an automation on your response and if it exceeds 3,000 characters the response will fail.",
        "options": {
          "systemMessage": "You are a guest assistant in charge of helping guests at a particular AirBnb location. You should try to help any answers they have using only the information in the vector store.\n\nIf you do not know the answer send a message to the owner through your Telegram tool. Or to notify if anything has gone wrong."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        220,
        0
      ],
      "id": "000b9093-57ac-4e4e-8cee-f3435b301c81",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        60,
        220
      ],
      "id": "2a6c4666-69bc-4344-a8be-3dafa152bed2",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "DavIMt1PnUQ9Imnh",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.message.chat.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        200,
        220
      ],
      "id": "c129c6a0-8be5-4498-a36f-b3d05018fb1a",
      "name": "Window Buffer Memory"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolCalculator",
      "typeVersion": 1,
      "position": [
        600,
        220
      ],
      "id": "af733c4f-4296-400a-886f-747f1bc3fa0b",
      "name": "Calculator"
    },
    {
      "parameters": {
        "name": "News_Web_Search",
        "description": "call this tool to search the web for news / recent information",
        "workflowId": {
          "__rl": true,
          "value": "d0AXhpO7lsh9hGTe",
          "mode": "list",
          "cachedResultName": "Tavily - Web Search NEWS"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "searchPrompt": "={{ $fromAI(\"webSearchPrompt\") }}"
          },
          "matchingColumns": [
            "searchPrompt"
          ],
          "schema": [
            {
              "id": "searchPrompt",
              "displayName": "searchPrompt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        360,
        220
      ],
      "id": "ee208def-06ae-4cbf-bc16-c9cdb2eb54d6",
      "name": "News Search"
    },
    {
      "parameters": {
        "name": "General_Web_Search",
        "description": "call this tool to search the web for general information",
        "workflowId": {
          "__rl": true,
          "value": "IepnshAuybStrj5L",
          "mode": "list",
          "cachedResultName": "Tavily - Web Search GENERAL"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "searchPrompt": "={{ $fromAI(\"webSearchPrompt\") }}"
          },
          "matchingColumns": [
            "searchPrompt"
          ],
          "schema": [
            {
              "id": "searchPrompt",
              "displayName": "searchPrompt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        480,
        220
      ],
      "id": "1bddaa1e-d39e-4ae7-8907-6c23f32ebf84",
      "name": "General Search"
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "guest_information_store",
        "toolDescription": "Get information about the house and guest's stay",
        "pineconeIndex": {
          "__rl": true,
          "value": "airbnbguest",
          "mode": "list",
          "cachedResultName": "airbnbguest"
        },
        "options": {
          "pineconeNamespace": "HouseInfo."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "typeVersion": 1,
      "position": [
        200,
        380
      ],
      "id": "a4eb6f2b-685b-4f18-a4b7-a3859f6cb9e4",
      "name": "Pinecone Vector Store",
      "credentials": {
        "pineconeApi": {
          "id": "WbT0Us1UFOtXBJWK",
          "name": "PineconeApi account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        280,
        520
      ],
      "id": "49b0e257-c6e0-4f7f-9476-d8df32590ea2",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "DavIMt1PnUQ9Imnh",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $json.output }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        580,
        0
      ],
      "id": "7c7326ca-5215-4b38-9405-8e9801a894e9",
      "name": "Telegram",
      "webhookId": "b83c60dc-a06c-48ef-b442-a20babd63967",
      "credentials": {
        "telegramApi": {
          "id": "QT1TafR4xHGlKkkF",
          "name": "Telegram account - Personal"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Sends a message to the home owner",
        "chatId": "___INSERT_CHAT_ID_FOR_PERSONAL_TELEGRAM___",
        "text": "={{ $fromAI(\"MessageToOwner\") }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTool",
      "typeVersion": 1.2,
      "position": [
        840,
        240
      ],
      "id": "991d99e7-23c9-4b0d-a2f9-4e9c41cb2c77",
      "name": "Telegram1",
      "webhookId": "198f1934-df27-47d7-bd1e-0974757b8cb2",
      "credentials": {
        "telegramApi": {
          "id": "QT1TafR4xHGlKkkF",
          "name": "Telegram account - Personal"
        }
      }
    },
    {
      "parameters": {
        "content": "### Message Owner\n*(should be different account from above)*",
        "height": 200,
        "width": 200,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        780,
        160
      ],
      "typeVersion": 1,
      "id": "5bd84bb0-65ba-4f91-8ba5-c6c327c90925",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Overview\n### 1. Telegram Trigger\n* Receives question from guest\n### 2. AI Agent\nAnswers the questions\n* Access to previous messages via memory\n* Document containing info. about the property through Pinecone vector store\n* Web Search Capabilities (News & General)\n* Calculator *(just in case)*\n* Telegram1 - sends message to home owner if the answer is unknown or something has gone wrong\n### 3. Telegram\n* Sends agent response back to the guest\n",
        "height": 400,
        "width": 420,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        40,
        -460
      ],
      "typeVersion": 1,
      "id": "21b7b54c-58e3-4748-acb3-792c183ca8a0",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "### Setup Guide\n- [ ] Create Telegram bot for guests\n- [ ] Connect bot to n8n via API key\n- [ ] OpenAI credential via 'secret key'\n- [ ] Create Pinecone index\n- [ ] Upload documents through n8n workflow\n- [ ] Select Pinecone index inside of this workflow\n- [ ] Optional, Create and connect web search workflows (news & general)\n- [ ] Create Telegram bot for home owner\n- [ ] Connect Telegram bot for home owner (same way as above)",
        "height": 360,
        "width": 320
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        600,
        -440
      ],
      "typeVersion": 1,
      "id": "b1227e6d-8a6e-451f-a37b-51f1bd489776",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## NOTE\n**You will want two Telegram bots!**\n\n\n**1. The first connected to the 'Telegram Trigger' and 'Telegram'**\n* this will communicate to the guests\n\n\n**2. The second will be the tool (inside the blue note)**\n* This will send you, the owner, messages if the agent doesn't have the answer or if something went wrong (ie a fire)",
        "height": 320,
        "width": 360,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -480,
        -80
      ],
      "typeVersion": 1,
      "id": "5c1021a7-de18-40d6-ae61-eff2be789ac4",
      "name": "Sticky Note3"
    }
  ],
  "pinData": {},
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Window Buffer Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Calculator": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "News Search": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "General Search": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Pinecone Vector Store": {
      "ai_vectorStore": [
        []
      ],
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Pinecone Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "ad9c601a-293e-43a2-bf9c-959118e2406a",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "16629a77b4219fe54201636e06c0d2eb72b1bdad86870b51670c815092d7bb05"
  },
  "id": "7zfIs9SWdBy6Z6p1",
  "tags": []
}